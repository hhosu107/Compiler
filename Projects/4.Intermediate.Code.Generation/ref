parsing 'test/tac/test5.mod'...
converting to TAC...
[[ module: test5
  [[ type manager
    base types:
      <NULL>
      <int>
      <char>
      <bool>
      <ptr(4) to <NULL>>
    pointer types:
      <ptr(4) to <NULL>>
      <ptr(4) to <array of <char>>>
      <ptr(4) to <array 10 of <array 5 of <int>>>>
    array types:
      <array of <char>>
      <array 5 of <int>>
      <array 10 of <array 5 of <int>>>
  ]]
  [[
    [ @A        <array 10 of <array 5 of <int>>>     ]
    [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>     ]
    [ *DOFS(<ptr(4) to <NULL>>) --> <int>     ]
    [ *ReadInt() --> <int>     ]
    [ *WriteChar(<char>) --> <NULL>     ]
    [ *WriteInt(<int>) --> <NULL>     ]
    [ *WriteLn() --> <NULL>     ]
    [ *WriteStr(<ptr(4) to <array of <char>>>) --> <NULL>     ]
    [ @i        <int>     ]
    [ $t0       <ptr(4) to <array 10 of <array 5 of <int>>>>     ]
    [ $t1       <ptr(4) to <array 10 of <array 5 of <int>>>>     ]
    [ $t2       <int>     ]
    [ $t3       <int>     ]
    [ $t4       <int>     ]
    [ $t5       <int>     ]
    [ $t6       <ptr(4) to <array 10 of <array 5 of <int>>>>     ]
    [ $t7       <int>     ]
    [ $t8       <int>     ]
    [ $t9       <int>     ]
  ]]
  [[ test5
      0:     &()    t0 <- A
      1:     param  1 <- 2
      2:     &()    t1 <- A
      3:     param  0 <- t1
      4:     call   t2 <- DIM
      5:     mul    t3 <- 1, t2
      6:     add    t4 <- t3, 3
      7:     mul    t5 <- t4, 4
      8:     &()    t6 <- A
      9:     param  0 <- t6
     10:     call   t7 <- DOFS
     11:     add    t8 <- t5, t7
     12:     add    t9 <- t0, t8
     13:     assign @t9 <- i
  ]]
]]

run the following command to convert the .dot file into a PDF:
  dot -Tpdf -otest/tac/test5.mod.pdf test/tac/test5.mod.dot


Done.
parsing 'test/tac/test1.mod'...
converting to TAC...
[[ module: test1
  [[ type manager
    base types:
      <NULL>
      <int>
      <char>
      <bool>
      <ptr(4) to <NULL>>
    pointer types:
      <ptr(4) to <NULL>>
      <ptr(4) to <array of <char>>>
    array types:
      <array of <char>>
  ]]
  [[
    [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>     ]
    [ *DOFS(<ptr(4) to <NULL>>) --> <int>     ]
    [ *ReadInt() --> <int>     ]
    [ *WriteChar(<char>) --> <NULL>     ]
    [ *WriteInt(<int>) --> <NULL>     ]
    [ *WriteLn() --> <NULL>     ]
    [ *WriteStr(<ptr(4) to <array of <char>>>) --> <NULL>     ]
    [ @i        <int>     ]
    [ $t0       <int>     ]
    [ $t1       <int>     ]
  ]]
  [[ test1
      0:     add    t0 <- 1, 2
      1:     mul    t1 <- t0, 3
      2:     assign i <- t1
  ]]
]]

run the following command to convert the .dot file into a PDF:
  dot -Tpdf -otest/tac/test1.mod.pdf test/tac/test1.mod.dot


Done.
parsing 'test/tac/test7.mod'...
converting to TAC...
[[ module: test7
  [[ type manager
    base types:
      <NULL>
      <int>
      <char>
      <bool>
      <ptr(4) to <NULL>>
    pointer types:
      <ptr(4) to <NULL>>
      <ptr(4) to <array of <char>>>
    array types:
      <array of <char>>
  ]]
  [[
    [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>     ]
    [ *DOFS(<ptr(4) to <NULL>>) --> <int>     ]
    [ *ReadInt() --> <int>     ]
    [ *WriteChar(<char>) --> <NULL>     ]
    [ *WriteInt(<int>) --> <NULL>     ]
    [ *WriteLn() --> <NULL>     ]
    [ *WriteStr(<ptr(4) to <array of <char>>>) --> <NULL>     ]
    [ @i        <int>     ]
  ]]
  [[ test7
      0:     if     i < 3 goto 3
      1:     goto   2_if_false
      2: 3:
      3:     if     i > 0 goto 1_if_true
      4:     goto   2_if_false
      5: 1_if_true:
      6:     assign i <- 0
      7:     goto   0
      8: 2_if_false:
      9: 0:
  ]]
]]

run the following command to convert the .dot file into a PDF:
  dot -Tpdf -otest/tac/test7.mod.pdf test/tac/test7.mod.dot


Done.
parsing 'test/tac/test4.mod'...
converting to TAC...
[[ module: test4
  [[ type manager
    base types:
      <NULL>
      <int>
      <char>
      <bool>
      <ptr(4) to <NULL>>
    pointer types:
      <ptr(4) to <NULL>>
      <ptr(4) to <array of <char>>>
    array types:
      <array of <char>>
  ]]
  [[
    [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>     ]
    [ *DOFS(<ptr(4) to <NULL>>) --> <int>     ]
    [ *ReadInt() --> <int>     ]
    [ *WriteChar(<char>) --> <NULL>     ]
    [ *WriteInt(<int>) --> <NULL>     ]
    [ *WriteLn() --> <NULL>     ]
    [ *WriteStr(<ptr(4) to <array of <char>>>) --> <NULL>     ]
    [ @i        <int>     ]
    [ $t0       <int>     ]
  ]]
  [[ test4
      0: 1_while_cond:
      1:     if     i > 3 goto 2_while_body
      2:     goto   0
      3: 2_while_body:
      4:     sub    t0 <- i, 1
      5:     assign i <- t0
      6:     goto   1_while_cond
      7: 0:
  ]]
]]

run the following command to convert the .dot file into a PDF:
  dot -Tpdf -otest/tac/test4.mod.pdf test/tac/test4.mod.dot


Done.
parsing 'test/tac/test2.mod'...
converting to TAC...
[[ module: test2
  [[ type manager
    base types:
      <NULL>
      <int>
      <char>
      <bool>
      <ptr(4) to <NULL>>
    pointer types:
      <ptr(4) to <NULL>>
      <ptr(4) to <array of <char>>>
    array types:
      <array of <char>>
  ]]
  [[
    [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>     ]
    [ *DOFS(<ptr(4) to <NULL>>) --> <int>     ]
    [ *ReadInt() --> <int>     ]
    [ *WriteChar(<char>) --> <NULL>     ]
    [ *WriteInt(<int>) --> <NULL>     ]
    [ *WriteLn() --> <NULL>     ]
    [ *WriteStr(<ptr(4) to <array of <char>>>) --> <NULL>     ]
    [ *bar(<int>,<int>,<int>,<int>) --> <int>     ]
    [ *foo(<int>) --> <NULL>     ]
    [ @i        <int>     ]
    [ $t0       <int>     ]
  ]]
  [[ test2
      0:     param  0 <- 1
      1:     call   foo
      2:     param  3 <- 4
      3:     param  2 <- 3
      4:     param  1 <- 2
      5:     param  0 <- 1
      6:     call   t0 <- bar
  ]]

  [[ procedure: foo
    [[
      [ $t0       <int>       ]
      [ $t1       <int>       ]
      [ %v        <int>       ]
    ]]
    [[ foo
        0:     add    t0 <- 1, 2
        1:     mul    t1 <- t0, v
        2:     assign i <- t1
    ]]
  ]]

  [[ procedure: bar
    [[
      [ %p1       <int>       ]
      [ %p2       <int>       ]
      [ %p3       <int>       ]
      [ %p4       <int>       ]
      [ $t0       <int>       ]
      [ $t1       <int>       ]
      [ $t2       <int>       ]
    ]]
    [[ bar
        0:     add    t0 <- p1, p2
        1:     mul    t1 <- p3, p4
        2:     add    t2 <- t0, t1
        3:     return t2
    ]]
  ]]
]]

run the following command to convert the .dot file into a PDF:
  dot -Tpdf -otest/tac/test2.mod.pdf test/tac/test2.mod.dot


Done.
parsing 'test/tac/test8.mod'...
converting to TAC...
[[ module: test8
  [[ type manager
    base types:
      <NULL>
      <int>
      <char>
      <bool>
      <ptr(4) to <NULL>>
    pointer types:
      <ptr(4) to <NULL>>
      <ptr(4) to <array of <char>>>
    array types:
      <array of <char>>
  ]]
  [[
    [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>     ]
    [ *DOFS(<ptr(4) to <NULL>>) --> <int>     ]
    [ *ReadInt() --> <int>     ]
    [ *WriteChar(<char>) --> <NULL>     ]
    [ *WriteInt(<int>) --> <NULL>     ]
    [ *WriteLn() --> <NULL>     ]
    [ *WriteStr(<ptr(4) to <array of <char>>>) --> <NULL>     ]
    [ @b        <bool>     ]
    [ @i        <int>     ]
    [ $t0       <bool>     ]
  ]]
  [[ test8
      0:     if     i < 3 goto 4
      1:     goto   2
      2: 4:
      3:     if     i > 0 goto 1
      4:     goto   2
      5: 1:
      6:     assign t0 <- 1
      7:     goto   3
      8: 2:
      9:     assign t0 <- 0
     10: 3:
     11:     assign b <- t0
     12:     if     b = 1 goto 8_if_true
     13:     goto   9_if_false
     14: 8_if_true:
     15:     assign i <- 0
     16:     goto   7
     17: 9_if_false:
     18: 7:
  ]]
]]

run the following command to convert the .dot file into a PDF:
  dot -Tpdf -otest/tac/test8.mod.pdf test/tac/test8.mod.dot


Done.
parsing 'test/tac/test3.mod'...
converting to TAC...
[[ module: test3
  [[ type manager
    base types:
      <NULL>
      <int>
      <char>
      <bool>
      <ptr(4) to <NULL>>
    pointer types:
      <ptr(4) to <NULL>>
      <ptr(4) to <array of <char>>>
    array types:
      <array of <char>>
  ]]
  [[
    [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>     ]
    [ *DOFS(<ptr(4) to <NULL>>) --> <int>     ]
    [ *ReadInt() --> <int>     ]
    [ *WriteChar(<char>) --> <NULL>     ]
    [ *WriteInt(<int>) --> <NULL>     ]
    [ *WriteLn() --> <NULL>     ]
    [ *WriteStr(<ptr(4) to <array of <char>>>) --> <NULL>     ]
    [ @i        <int>     ]
  ]]
  [[ test3
      0:     if     i > 3 goto 1_if_true
      1:     goto   2_if_false
      2: 1_if_true:
      3:     if     i > 5 goto 5_if_true
      4:     goto   6_if_false
      5: 5_if_true:
      6:     assign i <- 0
      7:     assign i <- 1
      8:     goto   4
      9: 6_if_false:
     10:     assign i <- 1
     11: 4:
     12:     assign i <- 0
     13:     goto   0
     14: 2_if_false:
     15:     assign i <- 1
     16: 0:
  ]]
]]

run the following command to convert the .dot file into a PDF:
  dot -Tpdf -otest/tac/test3.mod.pdf test/tac/test3.mod.dot


Done.
parsing 'test/tac/test9.mod'...
converting to TAC...
[[ module: test6
  [[ type manager
    base types:
      <NULL>
      <int>
      <char>
      <bool>
      <ptr(4) to <NULL>>
    pointer types:
      <ptr(4) to <NULL>>
      <ptr(4) to <array of <char>>>
      <ptr(4) to <array of <array of <array of <int>>>>>
      <ptr(4) to <array 10 of <array 5 of <array 4 of <int>>>>>
    array types:
      <array of <char>>
      <array 4 of <int>>
      <array 5 of <array 4 of <int>>>
      <array 10 of <array 5 of <array 4 of <int>>>>
      <array of <int>>
      <array of <array of <int>>>
      <array of <array of <array of <int>>>>
  ]]
  [[
    [ @A        <array 10 of <array 5 of <array 4 of <int>>>>     ]
    [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>     ]
    [ *DOFS(<ptr(4) to <NULL>>) --> <int>     ]
    [ *ReadInt() --> <int>     ]
    [ *WriteChar(<char>) --> <NULL>     ]
    [ *WriteInt(<int>) --> <NULL>     ]
    [ *WriteLn() --> <NULL>     ]
    [ *WriteStr(<ptr(4) to <array of <char>>>) --> <NULL>     ]
    [ *foo(<ptr(4) to <array of <array of <array of <int>>>>>) --> <NULL>     ]
    [ @i        <int>     ]
    [ $t0       <ptr(4) to <array 10 of <array 5 of <array 4 of <int>>>>>     ]
  ]]
  [[ test6
      0:     assign i <- 0
      1:     &()    t0 <- A
      2:     param  0 <- t0
      3:     call   foo
  ]]

  [[ procedure: foo
    [[
      [ %M        <ptr(4) to <array of <array of <array of <int>>>>>       ]
      [ $t0       <int>       ]
      [ $t1       <int>       ]
      [ $t2       <int>       ]
      [ $t3       <int>       ]
      [ $t4       <int>       ]
      [ $t5       <int>       ]
      [ $t6       <int>       ]
      [ $t7       <int>       ]
      [ $t8       <int>       ]
      [ $t9       <int>       ]
    ]]
    [[ foo
        0:     param  1 <- 2
        1:     param  0 <- M
        2:     call   t0 <- DIM
        3:     mul    t1 <- 1, t0
        4:     add    t2 <- t1, 2
        5:     param  1 <- 3
        6:     param  0 <- M
        7:     call   t3 <- DIM
        8:     mul    t4 <- t2, t3
        9:     add    t5 <- t4, 3
       10:     mul    t6 <- t5, 4
       11:     param  0 <- M
       12:     call   t7 <- DOFS
       13:     add    t8 <- t6, t7
       14:     add    t9 <- M, t8
       15:     assign @t9 <- i
    ]]
  ]]
]]

run the following command to convert the .dot file into a PDF:
  dot -Tpdf -otest/tac/test9.mod.pdf test/tac/test9.mod.dot


Done.
parsing 'test/tac/test6.mod'...
converting to TAC...
[[ module: test6
  [[ type manager
    base types:
      <NULL>
      <int>
      <char>
      <bool>
      <ptr(4) to <NULL>>
    pointer types:
      <ptr(4) to <NULL>>
      <ptr(4) to <array of <char>>>
      <ptr(4) to <array of <int>>>
      <ptr(4) to <array 4 of <int>>>
      <ptr(4) to <array 10 of <array 5 of <array 4 of <int>>>>>
      <ptr(4) to <int>>
    array types:
      <array of <char>>
      <array 4 of <int>>
      <array 5 of <array 4 of <int>>>
      <array 10 of <array 5 of <array 4 of <int>>>>
      <array of <int>>
  ]]
  [[
    [ @A        <array 10 of <array 5 of <array 4 of <int>>>>     ]
    [ *DIM(<ptr(4) to <NULL>>,<int>) --> <int>     ]
    [ *DOFS(<ptr(4) to <NULL>>) --> <int>     ]
    [ *ReadInt() --> <int>     ]
    [ *WriteChar(<char>) --> <NULL>     ]
    [ *WriteInt(<int>) --> <NULL>     ]
    [ *WriteLn() --> <NULL>     ]
    [ *WriteStr(<ptr(4) to <array of <char>>>) --> <NULL>     ]
    [ *foo(<ptr(4) to <array of <int>>>) --> <NULL>     ]
    [ @i        <int>     ]
    [ $t0       <ptr(4) to <array 10 of <array 5 of <array 4 of <int>>>>>     ]
    [ $t1       <ptr(4) to <array 10 of <array 5 of <array 4 of <int>>>>>     ]
    [ $t10      <ptr(4) to <array 10 of <array 5 of <array 4 of <int>>>>>     ]
    [ $t11      <int>     ]
    [ $t12      <int>     ]
    [ $t13      <int>     ]
    [ $t14      <ptr(4) to <int>>     ]
    [ $t2       <int>     ]
    [ $t3       <int>     ]
    [ $t4       <int>     ]
    [ $t5       <ptr(4) to <array 10 of <array 5 of <array 4 of <int>>>>>     ]
    [ $t6       <int>     ]
    [ $t7       <int>     ]
    [ $t8       <int>     ]
    [ $t9       <int>     ]
  ]]
  [[ test6
      0:     assign i <- 0
      1:     &()    t0 <- A
      2:     param  1 <- 2
      3:     &()    t1 <- A
      4:     param  0 <- t1
      5:     call   t2 <- DIM
      6:     mul    t3 <- 3, t2
      7:     add    t4 <- t3, 2
      8:     param  1 <- 3
      9:     &()    t5 <- A
     10:     param  0 <- t5
     11:     call   t6 <- DIM
     12:     mul    t7 <- t4, t6
     13:     add    t8 <- t7, 0
     14:     mul    t9 <- t8, 4
     15:     &()    t10 <- A
     16:     param  0 <- t10
     17:     call   t11 <- DOFS
     18:     add    t12 <- t9, t11
     19:     add    t13 <- t0, t12
     20:     &()    t14 <- @t13
     21:     param  0 <- t14
     22:     call   foo
  ]]

  [[ procedure: foo
    [[
      [ %M        <ptr(4) to <array of <int>>>       ]
      [ $t0       <int>       ]
      [ $t1       <int>       ]
      [ $t2       <int>       ]
      [ $t3       <int>       ]
    ]]
    [[ foo
        0:     mul    t0 <- 1, 4
        1:     param  0 <- M
        2:     call   t1 <- DOFS
        3:     add    t2 <- t0, t1
        4:     add    t3 <- M, t2
        5:     assign @t3 <- i
    ]]
  ]]
]]

run the following command to convert the .dot file into a PDF:
  dot -Tpdf -otest/tac/test6.mod.pdf test/tac/test6.mod.dot


Done.
